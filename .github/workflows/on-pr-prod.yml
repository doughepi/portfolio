on:
  pull_request:
jobs:
  build:
    name: "Build (Speculative)"
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: data-visitor-334805 
      SERVICE_ACCOUNT: github-workflow@data-visitor-334805.iam.gserviceaccount.com
      REPO_NAME: general
      IMAGE_NAME: portfolio
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Commit Hash
        id: commit_hash
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    outputs:
      image_name: ${{ env.IMAGE_NAME }}
      image_tag: ${{ steps.commit_hash.outputs.sha_short }}
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs:
      - build
    env:
      PROJECT_ID: data-visitor-334805 
      TF_BUCKET: cf7e3478-6c37-4d0f-910c-87e6bda48191 
      DNS_NAME: piper.codes
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.BUILD_KEY_PROD }}
          export_default_credentials: true
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_BUCKET }}"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var "project_id=${{ env.PROJECT_ID }}" \
          -var "image_name=${{ needs.build.outputs.image_name }}" -var "image_tag=${{ needs.build.outputs.image_tag }}" \
          -var "dns_name=${{ env.DNS_NAME }}"
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: "const output = `#### Terraform Format and Style \U0001F58C\\`${{ steps.fmt.outcome }}\\`\n#### Terraform Initialization ⚙️\\`${{ steps.init.outcome }}\\`\n#### Terraform Plan \U0001F4D6\\`${{ steps.plan.outcome }}\\`\n#### Terraform Validation \U0001F916\\`${{ steps.validate.outcome }}\\`\n\n<details><summary>Show Plan</summary>\n\n\\`\\`\\`\\n\n${process.env.PLAN}\n\\`\\`\\`\n\n</details>\n\n*Pusher: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`*`;\n\ngithub.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: output\n})\n"
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
